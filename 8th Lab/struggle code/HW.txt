LAB 8: Linked Lists and Artificial Life.

Due: Nov 11 11:50pm

I. C PART OF THE LAB
A. Preliminaries:

Compile ALL code with "gcc -pedantic ..."
Make sure you have reviewed all lecture material, sample code, etc. up to this point.

"Review" means:
   * read it
   * compiled it
   * run it
   * asked questions about it

B. Overview:

You know have all the ingredients to:
   * write C using the built-in facilities and std libs
   * extend C via writing functions and defining data structures

The first point:
   * how, why, and where you must define variables and types
   * the basic operators (+,-,*,%,/, &&, ||, !, ==, =, ...)
   * control via:
      if, else, ...
      for
      while
   * I/O via printf, scanf
   * address/pointers: & "address of", * "value at"
   * using malloc

With respect to the second point:
   * struct
   * malloc
   * pointers to structs
enable you to define flexible (via struct), dynamic (via pointers, malloc)
data structures.

One such data structure is the LINKED LIST, and so with this lab we will go
further down this hole.

The jumping off point into this abyss: the *already working* code for a
linked list that I have provided via the website and on ECF's
/n/share/copy/csc180f/linked-lists directory:
   compile.sh
   ll.c
   ll.h
   ll_test.c
   README

The linked list guts are found in: ll.c and ll.h
while the test code is found in ll_test.c

You compile it via:
gcc -pedantic ll_test.c ll.c

Aside:
   Gcc will compile both pieces of code and "link them" to create
   the final execution. But how does Gcc know which file is the main
   file and which file is the helper? Is it the order of compilation?
   
   No! You could also do:
   gcc -pedantic ll.c ll_test.c
   and it will work.
   
   Look at both of them. Which file defines the "main" function?
   When you compile multiple files, there can be ONLY ONE MAIN.
End Aside
   
We provide:
 ll_add_to_head
 ll_add_to_tail
 ll_print
 ll_free

We will ask you to provide some new functions to make the linked
list more flexible.

If you look at ll.c, you'll notice that the prototypes section of the
file is sparse. We have SPLIT the file into two files:
   ll.c (containing C code)
   ll.h (containined C prototypes; called a "HEADER" file)
and we include "ll.h" in "ll.c" as well as "ll_test.c".
Summary: header files (.h files) contain prototypes and are
         included where they are needed.
Recall: to access the stdio lib we #include <stdio.h>
        to access the stdlib    we #include <stdlib.h>
Now     to access OUR linked list lib we #include "ll.h"

C. Instructions

Summary:
* int ll_find_by_value(llnode *pList,int val)
  This searches the list (pointed at by pList) for a node with
  value "val"; returning success/failure based on your search.

* int ll_del_from_tail(llnode **ppList)
  This finds the tail node, if it exists, and removes it from the list,
  adjusting the list. Remember to "free" any dynamic structures that are
  deleted.

* int ll_del_from_head(llnode **ppList)
  This finds the head node, if it exists, and removes it from the list,
  adjusting the list. Remember to "free" any dynamic structures that are
  deleted.

* int ll_del_by_value(llnode **ppList,int val)
  Search for the node with value "val" and if it exists, remove it.

* int ll_insert_in_order(llnode **ppList,int val)
  Insert a new node into the list, ensuring that it is inserted
  in order, as per:
  HEAD
  ...
  <This node has value <= the next>
  <This node has value >= the prior>
  ...
  TAIL

* int ll_concat(llnode **pSrcA,llnode **pSrcB)
  This will merge SrcA and SrcB so that SrcA consists of SrcA and
  SrcB concatenated: in Python-speak "SrcA = SrcA + SrcB"

* int ll_sort(llnode **ppList)
  This will run BUBBLE SORT (whose algorithm you saw in the last lab)
  on the list pointed at by ppList.

For all cases the return value is a STATUS, where:
   0 is success
   -1 is failure

The arg naming prefixes "p" to indicate the var is a pointer, and
"pp" to indicate the var is a pointer-to-pointer. This will remind you
(at the very least) as to how you need to access it:
     pp is a **
    *pp is a *
   **pp is a value

      p is a *
     *p is a value

Why were ** needed? Think about it. Read the prior course notes and
figure it out. If you don't understand:
  1. Ask
  2. Operationally, you don't really need to understand the "why"
     to complete the lab; follow the rules-of-thumb above and you should
     be able to write your programs

Submit ll.c and ll.h with your mods.

Make sure you test your code.
If you are getting seg faults or weird errors, use valgrind.
If you're code seems to work: still use valgrind...
If you don't know what valgrind is --- READ THE COURSE NOTES ALREADY.

II. PYTHON PART OF THE LAB: Artificial Life...

The Python part of this lab will be the first part of a multipart lab.

Create a class called "conway", which will be used as follows: x=conway(10,12,'zeros')
after which "x" will be a "conway" object that has an internal "store" variable
(you can name "store" whatever you want; I'll never see it) that consists of
10 lists, with each of the latter lists being a list of 12 integers,
all set to 0.
   x=conway(10,12,'random')
which will function as above, but instead of setting the values of all cells to
0, will set the values of all cells to unique, different, random values between
0 and 1 (inclusive).

Create a function in this class called "getDisp" that will return a string
that corresponds to the contents of the "conway" internal "store" variable.
Do this string construction in a VERY SPECIFIC WAY.  If there is a 0, use a
plain space " ". If there is a 1, use a "*".
At the end of a row, concat a new line ( ... + "\n" + ...)
Return this string as the function's return value.
DO NOT DO ANYTHING ELSE.

Create a function called "printDisp" that calls getDisp and prints the string
getDisp returns.
The objective of getDisp and printDisp is to generate a 2D picture with nothing or "*".
So if the grid had all 1's, and if it was called with 10,12 as the initial argument,
then you'd see a 10x12 matrix of *.
Be sure you follow this: no creativity here ... do not do anything other than the 
above. It will be vital for the rest of the lab.

Create a function called "setPos(row,col,val)" that will set the row,col element to
have value "val". Error check to ensure that val is only 0 or 1.

Create a function in this class called: "getNeighbours(row,col)"
which will return a list of numbers that returns the values of the 8 neighbours
of the row,col element. So the upper left, top, upper right, left, ...
values of the grid. What do you do on a boundary? Roll-over.

That is: if you're on the extreme right end of the grid, then the right column
will be the leftmost column. If you're on the extreme left end: the left column
will be the rightmost column. If you're at the top, then the upper row will be the
bottom row, and if you're at the bottom, then the lower row will be the top row.
That is, this artificial organism is going to live on a sphere...

All functions above, except getNeighbours and getDisp, will return a True for
success or a False for failure.

Submit this as "conwaylib.py"