#include <stdio.h>
#include <stdlib.h>
#include "ll.h"


int ll_add_to_head(llnode **head, int val) {
	llnode *old_head;
	if (head == NULL) {
		return -1;
	}
	old_head = *head;

	*head = (llnode *)malloc(sizeof(llnode));
	(*head)->val = val;
	(*head)->next = old_head;
	return 0;
}

int ll_add_to_tail(llnode **head, int val) {
	if (head == NULL) {
		return -1;
	}
	if (*head == NULL) {
		*head = (llnode *)malloc(sizeof(llnode));
		(*head)->val = val;
		(*head)->next = NULL;
		return 0;
	}
	else { /* recursively call ll_add_to_tail until we get to the tail
		   which is the point where the pointer is NULL */
		return ll_add_to_tail(&((*head)->next), val);
	}
}



int ll_print(llnode *p) {
	if (p == NULL) {
		return 0;
	}
	else {
		printf("val = %d\n", p->val);
		return ll_print(p->next);
	}
}


int ll_free(llnode *p) {
	if (p == NULL) {
		return -1;
	}
	else {
		llnode *f = p->next;
		free(p);
		return ll_free(f);
	}
}


int ll_find_by_value(llnode *pList, int val) {
	if (pList == NULL) {
		return -1;
	}
	if (pList->val == val){
		return 0;
	return ll_find_by_value(pList->next, val);}
}

int ll_del_from_tail(llnode **ppList) {
	if (ppList == NULL){
		return -1;}
	if ((*ppList)->next->next == NULL) {
		free((*ppList)->next);
		(*ppList)->next = NULL;
		return 0;
	}
	return ll_del_from_tail(&(*ppList)->next);
}


int ll_del_from_head(llnode **ppList) {
	if (ppList == NULL){
		return -1;}
	llnode *first_node;
	first_node = (*ppList)->next;
	(*ppList) = first_node;
	free(first_node);
	return 0;
}


int ll_del_by_value(llnode **ppList, int val) {
	if (ppList == NULL){
		return -1;}

	llnode *cur_node = *ppList;
	if (cur_node->val == val && cur_node->next == NULL) {
		ppList = NULL;
		free(cur_node);
		cur_node = NULL;
	}

	llnode *per_node = *ppList;
	cur_node = (*ppList)->next;
	while (cur_node != NULL)
	{
		if (cur_node->val == val) {
			per_node->next = cur_node->next;
			free(cur_node);
			cur_node = per_node->next;
		}
		per_node = cur_node;
		cur_node = cur_node->next;
	}
	return 0;
}


int ll_insert_in_order(llnode **ppList,int val) {
   /* we are going to iterate through the linked list to find the
      insertion point; we will need to track the prior node so we
      can stitch in the new node properly
      -> thus we will create two pointers to track the nodes
         "curr" and "prev"
   */
   llnode *prev = NULL;
   llnode *curr = NULL;

   if (ppList == NULL) { return -1; }
   if (*ppList == NULL) {
      /* if we're dealing with an empty linked list, just call
         add to head */
      return ll_add_to_head(ppList,val);
   }
   /* otherwise: we iterate through the list until will find the
      insert location */
   /* first we handle the degenerate case of the first node */
   if ((*ppList) -> val > val) {
      return ll_add_to_head(ppList,val);
   } else {
      prev = *ppList;
      curr = (*ppList)->next;
      while(curr != NULL) {
         if (curr->val > val) {
            break;
         } else {
            prev = curr;
            curr = prev->next;
         }
      }
      prev->next = (llnode *) malloc(sizeof(llnode));
      prev->next->val  = val;
      prev->next->next = curr;
      return 0;
   }
}


int ll_concat(llnode **pSrcA, llnode **pSrcB) {
	if (pSrcA == NULL || pSrcB == NULL)
		return -1;
	if (*pSrcA == NULL) {
		*pSrcA = *pSrcB;
		return 0;
	}
	if (*pSrcB == NULL){
		return 0;}
	llnode *cur_node = *pSrcA;
	while (cur_node->next != NULL)
	{
		cur_node = cur_node->next;
	}
	cur_node->next = *pSrcB;
	return 0;
}

int ll_sort(llnode **ppList) {
	if (ppList == NULL){
		return -1;}

	llnode *sort_node = *ppList;
	llnode *cur_node;
	int cur_val;
	while (sort_node != NULL) {
		cur_val = sort_node->val;
		cur_node = sort_node->next;
		while (cur_node != NULL) {
			if (cur_node->val < cur_val) {
				cur_val = cur_node->val;
				cur_node->val = sort_node->val;
				sort_node->val = cur_val;
			}
		}
		sort_node = sort_node->next;
	}
	return 0;
}